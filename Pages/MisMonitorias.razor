@page "/mis-monitorias"
@using System.Net.Http
@using System.Net.Http.Json
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavigationManager

	@if(loadingToken){
		<div></div>
	}else{

  <div class="mainLayout">
		@if (modal == true){
			<div class="modal">
					<div class="modal__container">
						<button @onclick="closeModal" class="modal__container__exit"></button>
						@if(currentModal == "delete") {
						<p>¿Quieres eliminar esta monitoria?</p>
						<div>
							<button @onclick="closeModal" class="modal__container__button">
								Cancelar
							</button>
							<button
								class="modal__container__button modal__container__button--red"
								@onclick="eliminarMonitoria"
							>
								Eliminar
							</button>
						</div>
						}
						@if(currentModal == "addstudent") {
						<p>¿Quieres asistir a esta monitoria?</p>
						<div>
							<button @onclick="closeModal" class="modal__container__button">
								Cancelar
							</button>
							<button
								class="modal__container__button modal__container__button--red"
								@onclick="addStudent"
							>
								Inscribir
							</button>
						</div>
						}
					</div>
				<div @onclick="closeModal" class="modal__overlay"></div>
			</div>
		}
			<NavMenu />
			<div class="mainLayout__container">
				<header class="mainLayout__container__header">
					<div class="mainLayout__container__header__gradient">
						<h1 class="color-white">Sistema de monitorias</h1>
						<span class="color-white">Universidad Santiago de Cali</span>
					</div>
				</header>
				<main>
					<div class="monitorias">
          @if (loading == false){
            @foreach (var item in monitorias)
            {
				    <div><span>@item.Name</span>
					  </div>
            }
          }else{
            <div>loading...</div>
          }
					</div>
        </main>
			</div>
		</div>
	}

@code {
  public bool loading = true;
  bool loadingToken = true;
  public bool modal = false;
  public string currentModal = "";
  public string currentId = "";
  public string[] token;
  Usuario usuario { get; set; }
	
  Monitoria[] monitorias { get; set; }

  private static readonly System.Text.Json.JsonSerializerOptions s_options = 
    new System.Text.Json.JsonSerializerOptions() 
  {
    PropertyNamingPolicy = System.Text.Json.JsonNamingPolicy.CamelCase,
    PropertyNameCaseInsensitive = true,
  };

	protected async override Task OnAfterRenderAsync(bool firstRender)    
	{
		if (firstRender)
    {
  			var aux = await localStorage.GetItemAsync<string>("token");
				if(aux == null){
					loadingToken = false;
					NavigationManager.NavigateTo("/login");
				}else{
					loadingToken = false;
					var httpResponseUser = await Http.GetFromJsonAsync<Usuario>("http://localhost:8080/api/usuarios/" + aux, s_options );
					usuario = httpResponseUser; 
        	var httpResponse = await Http.GetFromJsonAsync<Monitoria[]>("http://localhost:8080/api/monitorias/list/"+usuario.Id, s_options);
        	monitorias = httpResponse;
        	loading = false;
				}
    }
		StateHasChanged();
	}
  
  protected override async Task OnInitializedAsync()
    {
				

    }

	private void openModal(string id, string typeModal)
    {
				currentModal = typeModal;
				currentId = id;
        modal = true;
    }
 	private void closeModal()
    {
				currentId = "";
        modal = false;
    }

	private async Task addStudent() {
		var httpResponse = await Http.PostAsJsonAsync("http://localhost:8080/api/monitorias/"+currentId+"/"+usuario.Id, s_options);
		monitorias = await httpResponse.Content.ReadFromJsonAsync<Monitoria[]>();
		closeModal();
	}

	private async Task eliminarMonitoria(){
		var httpResponse = await Http.DeleteAsync("http://localhost:8080/api/monitorias/"+currentId);
		monitorias = await httpResponse.Content.ReadFromJsonAsync<Monitoria[]>();
		closeModal();
	}
}

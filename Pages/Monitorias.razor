@page "/monitorias"
@using System.Net.Http
@using System.Net.Http.Json
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavigationManager

	@if(loadingToken){
		<div class="mainLayout">
		<Nav />
			<div class="mainLayout__container">
				<header class="mainLayout__container__header">
					<div class="mainLayout__container__header__gradient">
						<h1 class="color-white">Sistema de monitorias</h1>
						<span class="color-white">Universidad Santiago de Cali</span>
					</div>
				</header>
				<main>
				</main>
			</div>
		</div>
	}else{

  <div class="mainLayout">
		@if (modal == true){
			<div class="modal">
					<div class="modal__container">
						<button @onclick="closeModal" class="modal__container__exit"></button>
						@if(currentModal == "removestudent") {
						<p>¿Quieres eliminar esta monitoria?</p>
						<div>
							<button @onclick="closeModal" class="modal__container__button">
								Cancelar
							</button>
							<button
								class="modal__container__button modal__container__button--red"
								@onclick="removestudent"
							>
								Eliminar
							</button>
						</div>
						}
						@if(currentModal == "delete") {
						<p>¿Quieres eliminar esta monitoria?</p>
						<div>
							<button @onclick="closeModal" class="modal__container__button">
								Cancelar
							</button>
							<button
								class="modal__container__button modal__container__button--red"
								@onclick="eliminarMonitoria"
							>
								Eliminar
							</button>
						</div>
						}
						@if(currentModal == "addstudent") {
						<p>¿Quieres asistir a esta monitoria?</p>
						<div>
							<button @onclick="closeModal" class="modal__container__button">
								Cancelar
							</button>
							<button
								class="modal__container__button modal__container__button--blue"
								@onclick="addStudent"
							>
								Inscribir
							</button>
						</div>
						}
					</div>
				<div @onclick="closeModal" class="modal__overlay"></div>
			</div>
		}
			@if (loading == false){
			@if(usuario.roll==1){
			<NavMenu />
			}
			@if (usuario.roll==2)
			{
			<NavMenuMonitor />	
			}
			@if (usuario.roll==3)
			{
			<NavMenuUser />		
			}
			}
			<div class="mainLayout__container">
				<header class="mainLayout__container__header">
					<div class="mainLayout__container__header__gradient">
						<h1 class="color-white">Sistema de monitorias</h1>
						<span class="color-white">Universidad Santiago de Cali</span>
					</div>
				</header>
				<main>
					<div class="monitorias">
						@if(usuario.roll == 1){
						<a class="form-monitoria__button monitorias" href="/nueva-monitoria">Crear una monitoria</a>
						}
		@if (monitorias.Length == 0)
		{
			<span>Aún no hay monitorias inscriptas</span>
		
		}else{
          @if (loading == false){
            @foreach (var item in monitorias)
            { 
				
				if(usuario.roll == 1){
					
					<div class="monitorias__item">
								<div class="monitorias__item__header">
									<h2>@item.Name</h2>
									<div>
										<a href="/monitorias/@item.Id" class="monitorias__item__button edit"></a>
										<button @onclick="@(() => openModal(item.Id, "delete"))" class="monitorias__item__button trash"></button>
									</div>
								</div>
								<hr>
								<br>
								<p>
              		@item.faculty
								</p>
								<br>
								<p><strong>Día: </strong>@item.day</p>
								<br>
								<p><strong>Hora de inicio: </strong>@DateTime.Parse(item.init).ToShortTimeString()</p>
								<br>
								<p><strong>Hora de Fin: </strong>@DateTime.Parse(item.end).ToShortTimeString()</p>
								<br>
								<p><strong>Sala: </strong>@item.livingRoom</p>
								<br>
								<p><strong>Cupos: </strong>@item.initialQuotas</p>
							</div>
				}else{
					@if (usuario.Id != item.monitor)
					{
						<div class="add-monitoria__item">
						<div>
						<h3 class="add-monitoria__item__title">
						@item.Name
						</h3>
						<br>
						<p>
							@item.faculty
						</p>
						<p><strong>Día: </strong>@item.day</p>
						<p><strong>Hora de inicio: </strong>@DateTime.Parse(item.init).ToShortTimeString()</p>
						<p><strong>Hora de Fin: </strong>@DateTime.Parse(item.end).ToShortTimeString()</p>
						<p><strong>Sala: </strong>@item.livingRoom</p>
						<p><strong>Cupos: </strong>@item.initialQuotas</p>
						</div>
						<div class="flex-center">
							@{bool isStudent = false;
						
							foreach (var idUser in item.students)
							{
								if (idUser == usuario.Id)
								{
										isStudent = true;
								}
							}
							if (!isStudent)
							{
								<button class="form-monitoria__button modalMonitor" @onclick="@(() => openModal(item.Id, "addstudent"))">Apuntarse</button>
							}else{
								<button class="form-monitoria__button modalMonitor red" @onclick="@(() => openModal(item.Id, "removestudent"))">Salir de esta monitoria</button>
							}
							}
						</div>
						</div>
					}
					
					
				}
							
            }
          }else{
            <div>loading...</div>
          }
		}
					</div>
        </main>
			</div>
		</div>
	}

@code {
  public bool loading = true;
  bool loadingToken = true;
  bool loadingAvailables = false;
  public bool modal = false;
  bool vacio = false;
  public string currentModal = "";
  public string currentId = "";
  public string[] token;
	
  Usuario usuario { get; set; }
	
  Monitoria[] monitorias { get; set; }

  private static readonly System.Text.Json.JsonSerializerOptions s_options = 
    new System.Text.Json.JsonSerializerOptions() 
  {
    PropertyNamingPolicy = System.Text.Json.JsonNamingPolicy.CamelCase,
    PropertyNameCaseInsensitive = true,
  };

	protected async override Task OnAfterRenderAsync(bool firstRender)    
	{
		
		if (firstRender)
		{
			var aux = await localStorage.GetItemAsync<string>("token");
				if(aux == null){
					loadingToken = false;
					NavigationManager.NavigateTo("/");
				}else{
					loadingToken = false;
					var httpResponseUser = await Http.GetFromJsonAsync<Usuario>("http://localhost:8080/api/usuarios/" + aux, s_options );
					usuario = httpResponseUser;
					if (usuario.roll == 1)
					{
						var httpResponse = await Http.GetFromJsonAsync<Monitoria[]>("http://localhost:8080/api/monitorias", s_options);
						monitorias = httpResponse;
					}else{
						var httpResponse = await Http.GetFromJsonAsync<Monitoria[]>("http://localhost:8080/api/monitorias/availablesusers", s_options);
						monitorias = httpResponse;
						
				}
				loading = false;
			}
		}
		StateHasChanged();
	}

	private void openModal(string id, string typeModal)
    {
				currentModal = typeModal;
				currentId = id;
        modal = true;
    }
 	private void closeModal()
    {
				currentId = "";
        modal = false;
    }

	private async Task addStudent() {
		loadingAvailables= true;
		var httpResponse = await Http.PostAsJsonAsync("http://localhost:8080/api/monitorias/"+currentId+"/"+usuario.Id, s_options);
		monitorias = await httpResponse.Content.ReadFromJsonAsync<Monitoria[]>();
		loadingAvailables = false;
		closeModal();
	}

	private async Task removestudent(){
		loadingAvailables=true;
		var httpResponse = await Http.GetFromJsonAsync<Monitoria[]>("http://localhost:8080/api/monitorias/removestudent/"+currentId+"/"+usuario.Id, s_options);
		monitorias = httpResponse;
		loadingAvailables = false;
		closeModal();
	}
	private async Task eliminarMonitoria(){
		var httpResponse = await Http.DeleteAsync("http://localhost:8080/api/monitorias/"+currentId);
		monitorias = await httpResponse.Content.ReadFromJsonAsync<Monitoria[]>();
		closeModal();
	}
}
